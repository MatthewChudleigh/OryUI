@inject IOryElementsTranslator OryTranslator
@model KratosUiNodeArgs

@{
    var attributes = Model.node.Attributes.GetKratosUiNodeInputAttributes();
    var uiText = attributes.Label ?? Model.node.Meta.Label;
}

<div class="field">
    <div class="control">
        @if (Model.FlowType == FlowType.Settings)
        {
            <button type="button" class="button is-info is-hidden-mobile"
                    required="@attributes.Required"
                    value="@attributes.Value" autocomplete="@attributes.Autocomplete"
                    disabled="@attributes.Disabled" name="@attributes.Name"
                    onclick="@attributes.Onclick" pattern="@attributes.Pattern">
                @OryTranslator.ForUiText(uiText)
            </button>
            <button type="button" class="button is-info is-fullwidth is-hidden-tablet"
                    required="@attributes.Required"
                    value="@attributes.Value" autocomplete="@attributes.Autocomplete"
                    disabled="@attributes.Disabled" name="@attributes.Name"
                    onclick="@attributes.Onclick" pattern="@attributes.Pattern">
                @OryTranslator.ForUiText(uiText)
            </button>
        }
        else
        {
            <button type="button" class="button is-info is-fullwidth"
                    required="@attributes.Required"
                    value="@attributes.Value" autocomplete="@attributes.Autocomplete"
                    disabled="@attributes.Disabled" name="@attributes.Name"
                    onclick="@attributes.Onclick" pattern="@attributes.Pattern">
                @OryTranslator.ForUiText(uiText)
            </button>
        }
    </div>
    
    @await Component.InvokeAsync("KratosUiTextMessages", Model.node.Messages)
</div>